.. include:: role_defs.rst

Adapters
========

.. _adapter_intf:

Adapter Interface
-----------------

.. method:: add_node(gene [, gen=0, attrs=None])

   Adds a node to the network representing the individual with the given
   ``gene``.

   :param object gene: The :red:`gene`.
   :param int gen: The generation number in which the addition is made.
   :param attrs: Any other attributes for this node.
   :type attrs: dict or None

   .. note::
      This operation succeeds even if there exists *already*, a node
      representing the same ``gene`` at the same ``generation``.

   :returns: The *concrete* ID for this node.
   :rtype: int
   :raises ~peaviz.exceptions.PEAvizAdapterAttributeError: If ``attr`` is **neither** a ``dict`` nor ``None``.

.. method:: add_edge(tag, src_id, dest_id [, attrs=None])

   Adds a directed edge from the node identified by ``src_id`` to the one
   identified by ``dest_id``.

   :param str tag: The primary label for the edge.
   :param int src_id: The *concrete* ID of the source node.
   :param int dest_id: The *concrete* ID of the destination node.
   :param attrs: Any other attributes for this edge.
   :type attrs: dict or None

   :returns: The *concrete* ID for this edge.
   :rtype: int
   :raises ~peaviz.exceptions.PEAvizAdapterAttributeError: If ``attr`` is **neither** a ``dict`` nor ``None``.
   
.. method:: get_node(node_id)

   Fetch the adapter's internal ``Node`` object.

   :param int node_id: The *concrete* ID of the node to fetch.
   :returns: The adapter's internal ``Node`` object.
   :rtype: object

.. method:: get_edge(edge_id)

   Fetch the adapter's internal ``Edge`` object.

   :param int edge_id: The *concrete* ID of the edge to fetch.
   :returns: The adapter's internal ``Edge`` object.
   :rtype: object

.. method:: get_individual(gene)

   Find the (raw/internal) node which represents the given ``gene``.

   :param object gene: The ``gene``.
   :returns: The adapter's internal ``Node`` object that represents the given
             ``gene``.
   :rtype: object

.. method:: walk_edge(tag, start_id)

   Traverse all nodes via edges with primary label as ``tag`` starting from the
   node identified by ``start_id`` till the node without any *out-edge* with
   label ``tag`` is reached and return it.

   :param str tag: The primary label of the edges which are to be traversed.
   :param str start_id: The *concrete* ID of the node where the *walk* is
                        initiated.
   :returns: The adapter's internal ``Node`` object that was *walked*
             upon.
   :rtype: object

.. method:: update_fitness(node_id, fitness)

   Used to update/set fitness of the node identified by ``node_id``.

   :param int node_id: The node's (concrete) ID.
   :param object fitness: The new fitness.

   .. todo::
      Link ``fitness`` from glossary.

.. method:: update_score(node_id, score)

   Used to update/set score of the node identified by ``node_id``.

   :param int node_id: The node's (concrete) ID.
   :param score: The new score.
   :type score: float or int

   .. todo::
      Link ``score`` from glossary.

.. method:: save()

   Save the network/graph representation to persistent storage and/or close any
   resources used by the adapter.

   :returns: The location where the representation was saved. This could be the
             path to a file or a URI.
   :rtype: str

.. method:: num_nodes()

   :returns: The number of nodes in network.
   :rtype: int

   .. note::
      This is not the same as number of individuals evaluated/generated by the
      GA.

.. automodule:: peaviz.adapters

Related Exceptions
******************

.. autoexception:: peaviz.exceptions.PEAvizAdapterAttributeError

``graph-tool`` Adapter
----------------------

.. autoclass:: peaviz.adapters.GraphAdapter
   :members:

